// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiInformacionPersonalDataOnDemand;
import com.ssigdl.sirc.entity.SsiInformacionPersonal;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.stereotype.Component;

privileged aspect SsiInformacionPersonalDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SsiInformacionPersonalDataOnDemand: @Component;
    
    private Random SsiInformacionPersonalDataOnDemand.rnd = new SecureRandom();
    
    private List<SsiInformacionPersonal> SsiInformacionPersonalDataOnDemand.data;
    
    public SsiInformacionPersonal SsiInformacionPersonalDataOnDemand.getNewTransientSsiInformacionPersonal(int index) {
        SsiInformacionPersonal obj = new SsiInformacionPersonal();
        setInfpApellido(obj, index);
        setInfpNombre(obj, index);
        setInfpSexo(obj, index);
        return obj;
    }
    
    public void SsiInformacionPersonalDataOnDemand.setInfpApellido(SsiInformacionPersonal obj, int index) {
        String infpApellido = "infpApellido_" + index;
        if (infpApellido.length() > 50) {
            infpApellido = infpApellido.substring(0, 50);
        }
        obj.setInfpApellido(infpApellido);
    }
    
    public void SsiInformacionPersonalDataOnDemand.setInfpNombre(SsiInformacionPersonal obj, int index) {
        String infpNombre = "infpNombre_" + index;
        if (infpNombre.length() > 50) {
            infpNombre = infpNombre.substring(0, 50);
        }
        obj.setInfpNombre(infpNombre);
    }
    
    public void SsiInformacionPersonalDataOnDemand.setInfpSexo(SsiInformacionPersonal obj, int index) {
        String infpSexo = "i_" + index;
        if (infpSexo.length() > 3) {
            infpSexo = infpSexo.substring(0, 3);
        }
        obj.setInfpSexo(infpSexo);
    }
    
    public SsiInformacionPersonal SsiInformacionPersonalDataOnDemand.getSpecificSsiInformacionPersonal(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SsiInformacionPersonal obj = data.get(index);
        Integer id = obj.getInfpId();
        return SsiInformacionPersonal.findSsiInformacionPersonal(id);
    }
    
    public SsiInformacionPersonal SsiInformacionPersonalDataOnDemand.getRandomSsiInformacionPersonal() {
        init();
        SsiInformacionPersonal obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getInfpId();
        return SsiInformacionPersonal.findSsiInformacionPersonal(id);
    }
    
    public boolean SsiInformacionPersonalDataOnDemand.modifySsiInformacionPersonal(SsiInformacionPersonal obj) {
        return false;
    }
    
    public void SsiInformacionPersonalDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SsiInformacionPersonal.findSsiInformacionPersonalEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SsiInformacionPersonal' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SsiInformacionPersonal>();
        for (int i = 0; i < 10; i++) {
            SsiInformacionPersonal obj = getNewTransientSsiInformacionPersonal(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
