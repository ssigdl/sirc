// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiArticuloDataOnDemand;
import com.ssigdl.sirc.domain.SsiFacturaArticuloRelDataOnDemand;
import com.ssigdl.sirc.domain.SsiFacturaDataOnDemand;
import com.ssigdl.sirc.entity.SsiArticulo;
import com.ssigdl.sirc.entity.SsiFactura;
import com.ssigdl.sirc.entity.SsiFacturaArticuloRel;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SsiFacturaArticuloRelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SsiFacturaArticuloRelDataOnDemand: @Component;
    
    private Random SsiFacturaArticuloRelDataOnDemand.rnd = new SecureRandom();
    
    private List<SsiFacturaArticuloRel> SsiFacturaArticuloRelDataOnDemand.data;
    
    @Autowired
    SsiArticuloDataOnDemand SsiFacturaArticuloRelDataOnDemand.ssiArticuloDataOnDemand;
    
    @Autowired
    SsiFacturaDataOnDemand SsiFacturaArticuloRelDataOnDemand.ssiFacturaDataOnDemand;
    
    public SsiFacturaArticuloRel SsiFacturaArticuloRelDataOnDemand.getNewTransientSsiFacturaArticuloRel(int index) {
        SsiFacturaArticuloRel obj = new SsiFacturaArticuloRel();
        setFartArtIdFk(obj, index);
        setFartFactIdFk(obj, index);
        return obj;
    }
    
    public void SsiFacturaArticuloRelDataOnDemand.setFartArtIdFk(SsiFacturaArticuloRel obj, int index) {
        SsiArticulo fartArtIdFk = ssiArticuloDataOnDemand.getRandomSsiArticulo();
        obj.setFartArtIdFk(fartArtIdFk);
    }
    
    public void SsiFacturaArticuloRelDataOnDemand.setFartFactIdFk(SsiFacturaArticuloRel obj, int index) {
        SsiFactura fartFactIdFk = ssiFacturaDataOnDemand.getRandomSsiFactura();
        obj.setFartFactIdFk(fartFactIdFk);
    }
    
    public SsiFacturaArticuloRel SsiFacturaArticuloRelDataOnDemand.getSpecificSsiFacturaArticuloRel(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SsiFacturaArticuloRel obj = data.get(index);
        Integer id = obj.getFartId();
        return SsiFacturaArticuloRel.findSsiFacturaArticuloRel(id);
    }
    
    public SsiFacturaArticuloRel SsiFacturaArticuloRelDataOnDemand.getRandomSsiFacturaArticuloRel() {
        init();
        SsiFacturaArticuloRel obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getFartId();
        return SsiFacturaArticuloRel.findSsiFacturaArticuloRel(id);
    }
    
    public boolean SsiFacturaArticuloRelDataOnDemand.modifySsiFacturaArticuloRel(SsiFacturaArticuloRel obj) {
        return false;
    }
    
    public void SsiFacturaArticuloRelDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SsiFacturaArticuloRel.findSsiFacturaArticuloRelEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SsiFacturaArticuloRel' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SsiFacturaArticuloRel>();
        for (int i = 0; i < 10; i++) {
            SsiFacturaArticuloRel obj = getNewTransientSsiFacturaArticuloRel(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
