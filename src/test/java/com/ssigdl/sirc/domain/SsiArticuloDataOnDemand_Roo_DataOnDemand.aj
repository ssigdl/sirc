// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiArticuloDataOnDemand;
import com.ssigdl.sirc.domain.SsiArticuloUnidadMedidaDataOnDemand;
import com.ssigdl.sirc.domain.SsiCategoriaDataOnDemand;
import com.ssigdl.sirc.entity.SsiArticulo;
import com.ssigdl.sirc.entity.SsiArticuloUnidadMedida;
import com.ssigdl.sirc.entity.SsiCategoria;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SsiArticuloDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SsiArticuloDataOnDemand: @Component;
    
    private Random SsiArticuloDataOnDemand.rnd = new SecureRandom();
    
    private List<SsiArticulo> SsiArticuloDataOnDemand.data;
    
    @Autowired
    SsiArticuloUnidadMedidaDataOnDemand SsiArticuloDataOnDemand.ssiArticuloUnidadMedidaDataOnDemand;
    
    @Autowired
    SsiCategoriaDataOnDemand SsiArticuloDataOnDemand.ssiCategoriaDataOnDemand;
    
    public SsiArticulo SsiArticuloDataOnDemand.getNewTransientSsiArticulo(int index) {
        SsiArticulo obj = new SsiArticulo();
        setArtArumIdFk(obj, index);
        setArtCantidad(obj, index);
        setArtCatIdFk(obj, index);
        setArtDescripcion(obj, index);
        setArtImagen(obj, index);
        setArtMarca(obj, index);
        setArtNombreProducto(obj, index);
        setArtPrecioUnitario(obj, index);
        setArtSubtotal(obj, index);
        return obj;
    }
    
    public void SsiArticuloDataOnDemand.setArtArumIdFk(SsiArticulo obj, int index) {
        SsiArticuloUnidadMedida artArumIdFk = ssiArticuloUnidadMedidaDataOnDemand.getRandomSsiArticuloUnidadMedida();
        obj.setArtArumIdFk(artArumIdFk);
    }
    
    public void SsiArticuloDataOnDemand.setArtCantidad(SsiArticulo obj, int index) {
        Short artCantidad = new Integer(index).shortValue();
        obj.setArtCantidad(artCantidad);
    }
    
    public void SsiArticuloDataOnDemand.setArtCatIdFk(SsiArticulo obj, int index) {
        SsiCategoria artCatIdFk = ssiCategoriaDataOnDemand.getRandomSsiCategoria();
        obj.setArtCatIdFk(artCatIdFk);
    }
    
    public void SsiArticuloDataOnDemand.setArtDescripcion(SsiArticulo obj, int index) {
        String artDescripcion = "artDescripcion_" + index;
        if (artDescripcion.length() > 255) {
            artDescripcion = artDescripcion.substring(0, 255);
        }
        obj.setArtDescripcion(artDescripcion);
    }
    
    public void SsiArticuloDataOnDemand.setArtImagen(SsiArticulo obj, int index) {
        String artImagen = "artImagen_" + index;
        if (artImagen.length() > 255) {
            artImagen = artImagen.substring(0, 255);
        }
        obj.setArtImagen(artImagen);
    }
    
    public void SsiArticuloDataOnDemand.setArtMarca(SsiArticulo obj, int index) {
        String artMarca = "artMarca_" + index;
        if (artMarca.length() > 50) {
            artMarca = artMarca.substring(0, 50);
        }
        obj.setArtMarca(artMarca);
    }
    
    public void SsiArticuloDataOnDemand.setArtNombreProducto(SsiArticulo obj, int index) {
        String artNombreProducto = "artNombreProducto_" + index;
        if (artNombreProducto.length() > 100) {
            artNombreProducto = artNombreProducto.substring(0, 100);
        }
        obj.setArtNombreProducto(artNombreProducto);
    }
    
    public void SsiArticuloDataOnDemand.setArtPrecioUnitario(SsiArticulo obj, int index) {
        BigDecimal artPrecioUnitario = BigDecimal.valueOf(index);
        if (artPrecioUnitario.compareTo(new BigDecimal("99999999.99")) == 1) {
            artPrecioUnitario = new BigDecimal("99999999.99");
        }
        obj.setArtPrecioUnitario(artPrecioUnitario);
    }
    
    public void SsiArticuloDataOnDemand.setArtSubtotal(SsiArticulo obj, int index) {
        BigDecimal artSubtotal = BigDecimal.valueOf(index);
        if (artSubtotal.compareTo(new BigDecimal("99999999.99")) == 1) {
            artSubtotal = new BigDecimal("99999999.99");
        }
        obj.setArtSubtotal(artSubtotal);
    }
    
    public SsiArticulo SsiArticuloDataOnDemand.getSpecificSsiArticulo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SsiArticulo obj = data.get(index);
        Integer id = obj.getArtId();
        return SsiArticulo.findSsiArticulo(id);
    }
    
    public SsiArticulo SsiArticuloDataOnDemand.getRandomSsiArticulo() {
        init();
        SsiArticulo obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getArtId();
        return SsiArticulo.findSsiArticulo(id);
    }
    
    public boolean SsiArticuloDataOnDemand.modifySsiArticulo(SsiArticulo obj) {
        return false;
    }
    
    public void SsiArticuloDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SsiArticulo.findSsiArticuloEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SsiArticulo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SsiArticulo>();
        for (int i = 0; i < 10; i++) {
            SsiArticulo obj = getNewTransientSsiArticulo(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
