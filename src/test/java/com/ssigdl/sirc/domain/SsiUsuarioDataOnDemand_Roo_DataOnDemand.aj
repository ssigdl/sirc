// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiInformacionPersonalDataOnDemand;
import com.ssigdl.sirc.domain.SsiUsuarioDataOnDemand;
import com.ssigdl.sirc.entity.SsiInformacionPersonal;
import com.ssigdl.sirc.entity.SsiUsuario;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SsiUsuarioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SsiUsuarioDataOnDemand: @Component;
    
    private Random SsiUsuarioDataOnDemand.rnd = new SecureRandom();
    
    private List<SsiUsuario> SsiUsuarioDataOnDemand.data;
    
    @Autowired
    SsiInformacionPersonalDataOnDemand SsiUsuarioDataOnDemand.ssiInformacionPersonalDataOnDemand;
    
    public SsiUsuario SsiUsuarioDataOnDemand.getNewTransientSsiUsuario(int index) {
        SsiUsuario obj = new SsiUsuario();
        setUsuCodigo(obj, index);
        setUsuFecha(obj, index);
        setUsuInfpIdFk(obj, index);
        setUsuPassword(obj, index);
        return obj;
    }
    
    public void SsiUsuarioDataOnDemand.setUsuCodigo(SsiUsuario obj, int index) {
        String usuCodigo = "usuCodigo_" + index;
        if (usuCodigo.length() > 255) {
            usuCodigo = usuCodigo.substring(0, 255);
        }
        obj.setUsuCodigo(usuCodigo);
    }
    
    public void SsiUsuarioDataOnDemand.setUsuFecha(SsiUsuario obj, int index) {
        Date usuFecha = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUsuFecha(usuFecha);
    }
    
    public void SsiUsuarioDataOnDemand.setUsuInfpIdFk(SsiUsuario obj, int index) {
        SsiInformacionPersonal usuInfpIdFk = ssiInformacionPersonalDataOnDemand.getRandomSsiInformacionPersonal();
        obj.setUsuInfpIdFk(usuInfpIdFk);
    }
    
    public void SsiUsuarioDataOnDemand.setUsuPassword(SsiUsuario obj, int index) {
        String usuPassword = "usuPassword_" + index;
        if (usuPassword.length() > 255) {
            usuPassword = usuPassword.substring(0, 255);
        }
        obj.setUsuPassword(usuPassword);
    }
    
    public SsiUsuario SsiUsuarioDataOnDemand.getSpecificSsiUsuario(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SsiUsuario obj = data.get(index);
        Integer id = obj.getUsuId();
        return SsiUsuario.findSsiUsuario(id);
    }
    
    public SsiUsuario SsiUsuarioDataOnDemand.getRandomSsiUsuario() {
        init();
        SsiUsuario obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getUsuId();
        return SsiUsuario.findSsiUsuario(id);
    }
    
    public boolean SsiUsuarioDataOnDemand.modifySsiUsuario(SsiUsuario obj) {
        return false;
    }
    
    public void SsiUsuarioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SsiUsuario.findSsiUsuarioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SsiUsuario' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SsiUsuario>();
        for (int i = 0; i < 10; i++) {
            SsiUsuario obj = getNewTransientSsiUsuario(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
