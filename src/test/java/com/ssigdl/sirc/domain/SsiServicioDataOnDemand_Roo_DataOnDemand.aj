// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiCategoriaDataOnDemand;
import com.ssigdl.sirc.domain.SsiServicioDataOnDemand;
import com.ssigdl.sirc.entity.SsiCategoria;
import com.ssigdl.sirc.entity.SsiServicio;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SsiServicioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SsiServicioDataOnDemand: @Component;
    
    private Random SsiServicioDataOnDemand.rnd = new SecureRandom();
    
    private List<SsiServicio> SsiServicioDataOnDemand.data;
    
    @Autowired
    SsiCategoriaDataOnDemand SsiServicioDataOnDemand.ssiCategoriaDataOnDemand;
    
    public SsiServicio SsiServicioDataOnDemand.getNewTransientSsiServicio(int index) {
        SsiServicio obj = new SsiServicio();
        setServCatIdFk(obj, index);
        setServDescripcion(obj, index);
        setServImagen(obj, index);
        setServNombre(obj, index);
        setServPrecio(obj, index);
        return obj;
    }
    
    public void SsiServicioDataOnDemand.setServCatIdFk(SsiServicio obj, int index) {
        SsiCategoria servCatIdFk = ssiCategoriaDataOnDemand.getRandomSsiCategoria();
        obj.setServCatIdFk(servCatIdFk);
    }
    
    public void SsiServicioDataOnDemand.setServDescripcion(SsiServicio obj, int index) {
        String servDescripcion = "servDescripcion_" + index;
        if (servDescripcion.length() > 255) {
            servDescripcion = servDescripcion.substring(0, 255);
        }
        obj.setServDescripcion(servDescripcion);
    }
    
    public void SsiServicioDataOnDemand.setServImagen(SsiServicio obj, int index) {
        String servImagen = "servImagen_" + index;
        if (servImagen.length() > 255) {
            servImagen = servImagen.substring(0, 255);
        }
        obj.setServImagen(servImagen);
    }
    
    public void SsiServicioDataOnDemand.setServNombre(SsiServicio obj, int index) {
        String servNombre = "servNombre_" + index;
        if (servNombre.length() > 100) {
            servNombre = servNombre.substring(0, 100);
        }
        obj.setServNombre(servNombre);
    }
    
    public void SsiServicioDataOnDemand.setServPrecio(SsiServicio obj, int index) {
        BigDecimal servPrecio = BigDecimal.valueOf(index);
        if (servPrecio.compareTo(new BigDecimal("99999999.99")) == 1) {
            servPrecio = new BigDecimal("99999999.99");
        }
        obj.setServPrecio(servPrecio);
    }
    
    public SsiServicio SsiServicioDataOnDemand.getSpecificSsiServicio(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SsiServicio obj = data.get(index);
        Integer id = obj.getServId();
        return SsiServicio.findSsiServicio(id);
    }
    
    public SsiServicio SsiServicioDataOnDemand.getRandomSsiServicio() {
        init();
        SsiServicio obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getServId();
        return SsiServicio.findSsiServicio(id);
    }
    
    public boolean SsiServicioDataOnDemand.modifySsiServicio(SsiServicio obj) {
        return false;
    }
    
    public void SsiServicioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SsiServicio.findSsiServicioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SsiServicio' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SsiServicio>();
        for (int i = 0; i < 10; i++) {
            SsiServicio obj = getNewTransientSsiServicio(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
