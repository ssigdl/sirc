// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiChequeDataOnDemand;
import com.ssigdl.sirc.entity.SsiCheque;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.stereotype.Component;

privileged aspect SsiChequeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SsiChequeDataOnDemand: @Component;
    
    private Random SsiChequeDataOnDemand.rnd = new SecureRandom();
    
    private List<SsiCheque> SsiChequeDataOnDemand.data;
    
    public SsiCheque SsiChequeDataOnDemand.getNewTransientSsiCheque(int index) {
        SsiCheque obj = new SsiCheque();
        setCheConcepto(obj, index);
        setCheFecha(obj, index);
        setCheMonto(obj, index);
        setCheNumero(obj, index);
        setCheReceptor(obj, index);
        return obj;
    }
    
    public void SsiChequeDataOnDemand.setCheConcepto(SsiCheque obj, int index) {
        String cheConcepto = "cheConcepto_" + index;
        if (cheConcepto.length() > 100) {
            cheConcepto = cheConcepto.substring(0, 100);
        }
        obj.setCheConcepto(cheConcepto);
    }
    
    public void SsiChequeDataOnDemand.setCheFecha(SsiCheque obj, int index) {
        Date cheFecha = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCheFecha(cheFecha);
    }
    
    public void SsiChequeDataOnDemand.setCheMonto(SsiCheque obj, int index) {
        BigDecimal cheMonto = BigDecimal.valueOf(index);
        if (cheMonto.compareTo(new BigDecimal("99999999.99")) == 1) {
            cheMonto = new BigDecimal("99999999.99");
        }
        obj.setCheMonto(cheMonto);
    }
    
    public void SsiChequeDataOnDemand.setCheNumero(SsiCheque obj, int index) {
        String cheNumero = "cheNumero_" + index;
        if (cheNumero.length() > 30) {
            cheNumero = cheNumero.substring(0, 30);
        }
        obj.setCheNumero(cheNumero);
    }
    
    public void SsiChequeDataOnDemand.setCheReceptor(SsiCheque obj, int index) {
        String cheReceptor = "cheReceptor_" + index;
        if (cheReceptor.length() > 100) {
            cheReceptor = cheReceptor.substring(0, 100);
        }
        obj.setCheReceptor(cheReceptor);
    }
    
    public SsiCheque SsiChequeDataOnDemand.getSpecificSsiCheque(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SsiCheque obj = data.get(index);
        Integer id = obj.getCheId();
        return SsiCheque.findSsiCheque(id);
    }
    
    public SsiCheque SsiChequeDataOnDemand.getRandomSsiCheque() {
        init();
        SsiCheque obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCheId();
        return SsiCheque.findSsiCheque(id);
    }
    
    public boolean SsiChequeDataOnDemand.modifySsiCheque(SsiCheque obj) {
        return false;
    }
    
    public void SsiChequeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = SsiCheque.findSsiChequeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SsiCheque' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SsiCheque>();
        for (int i = 0; i < 10; i++) {
            SsiCheque obj = getNewTransientSsiCheque(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
