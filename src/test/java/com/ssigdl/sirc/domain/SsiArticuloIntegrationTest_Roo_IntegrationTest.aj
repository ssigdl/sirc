// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ssigdl.sirc.domain;

import com.ssigdl.sirc.domain.SsiArticuloDataOnDemand;
import com.ssigdl.sirc.domain.SsiArticuloIntegrationTest;
import com.ssigdl.sirc.entity.SsiArticulo;

import java.util.Iterator;
import java.util.List;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SsiArticuloIntegrationTest_Roo_IntegrationTest {
    
    declare @type: SsiArticuloIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: SsiArticuloIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    declare @type: SsiArticuloIntegrationTest: @Transactional;
    
    @Autowired
    SsiArticuloDataOnDemand SsiArticuloIntegrationTest.dod;
    
    @Test
    public void SsiArticuloIntegrationTest.testCountSsiArticuloes() {
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to initialize correctly", dod.getRandomSsiArticulo());
        long count = SsiArticulo.countSsiArticuloes();
        Assert.assertTrue("Counter for 'SsiArticulo' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void SsiArticuloIntegrationTest.testFindSsiArticulo() {
        SsiArticulo obj = dod.getRandomSsiArticulo();
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to initialize correctly", obj);
        Integer id = obj.getArtId();
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to provide an identifier", id);
        obj = SsiArticulo.findSsiArticulo(id);
        Assert.assertNotNull("Find method for 'SsiArticulo' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'SsiArticulo' returned the incorrect identifier", id, obj.getArtId());
    }
    
    @Test
    public void SsiArticuloIntegrationTest.testFindAllSsiArticuloes() {
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to initialize correctly", dod.getRandomSsiArticulo());
        long count = SsiArticulo.countSsiArticuloes();
        Assert.assertTrue("Too expensive to perform a find all test for 'SsiArticulo', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<SsiArticulo> result = SsiArticulo.findAllSsiArticuloes();
        Assert.assertNotNull("Find all method for 'SsiArticulo' illegally returned null", result);
        Assert.assertTrue("Find all method for 'SsiArticulo' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void SsiArticuloIntegrationTest.testFindSsiArticuloEntries() {
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to initialize correctly", dod.getRandomSsiArticulo());
        long count = SsiArticulo.countSsiArticuloes();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<SsiArticulo> result = SsiArticulo.findSsiArticuloEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'SsiArticulo' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'SsiArticulo' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void SsiArticuloIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to initialize correctly", dod.getRandomSsiArticulo());
        SsiArticulo obj = dod.getNewTransientSsiArticulo(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'SsiArticulo' identifier to be null", obj.getArtId());
        try {
            obj.persist();
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        obj.flush();
        Assert.assertNotNull("Expected 'SsiArticulo' identifier to no longer be null", obj.getArtId());
    }
    
    @Test
    public void SsiArticuloIntegrationTest.testRemove() {
        SsiArticulo obj = dod.getRandomSsiArticulo();
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to initialize correctly", obj);
        Integer id = obj.getArtId();
        Assert.assertNotNull("Data on demand for 'SsiArticulo' failed to provide an identifier", id);
        obj = SsiArticulo.findSsiArticulo(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'SsiArticulo' with identifier '" + id + "'", SsiArticulo.findSsiArticulo(id));
    }
    
}
